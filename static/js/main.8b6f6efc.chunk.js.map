{"version":3,"sources":["CountDownTimer.js","App.js","reportWebVitals.js","index.js"],"names":["CountDownTimer","hoursMinSecs","hours","minutes","seconds","React","useState","hrs","mins","secs","setTime","reset","parseInt","useEffect","timerId","setInterval","clearInterval","toString","padStart","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAyCeA,EAtCQ,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAErB,EAAiDA,EAAzCC,aAAR,MAAgB,EAAhB,IAAiDD,EAA9BE,eAAnB,MAA6B,EAA7B,IAAiDF,EAAjBG,eAAhC,MAA0C,GAA1C,EACA,EAAqCC,IAAMC,SAAS,CAACJ,EAAOC,EAASC,IAArE,yCAAQG,EAAR,KAAaC,EAAb,KAAmBC,EAAnB,KAA0BC,EAA1B,KAiBMC,EAAQ,kBAAMD,EAAQ,CAACE,SAASV,GAAQU,SAAST,GAAUS,SAASR,MAS1E,OANAC,IAAMQ,WAAU,WACZ,IAAMC,EAAUC,aAAY,WAhBhB,IAARR,GAAsB,IAATC,GAAuB,IAATC,EAC3BE,IAEAD,EADc,IAATF,GAAuB,IAATC,EACX,CAACF,EAAM,EAAG,GAAI,IACN,IAATE,EACC,CAACF,EAAKC,EAAO,EAAG,IAEhB,CAACD,EAAKC,EAAMC,EAAO,MASW,KAC1C,OAAO,kBAAMO,cAAcF,OAK3B,8BACI,sCAAOP,EAAIU,WAAWC,SAAS,EAAG,KAAlC,YAA0CV,EACzCS,WACAC,SAAS,EAAG,KAFb,YAEqBT,EAAKQ,WAAWC,SAAS,EAAG,WCtB9CC,MAXf,WAIE,OACE,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,CAAgBnB,aAJD,CAACC,MAAM,EAAGC,QAAS,GAAIC,QAAS,SCOxCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8b6f6efc.chunk.js","sourcesContent":["\nimport React from 'react'\n\nconst CountDownTimer = ({hoursMinSecs}) => {\n   \n    const { hours = 0, minutes = 0, seconds = 60 } = hoursMinSecs;\n    const [[hrs, mins, secs], setTime] = React.useState([hours, minutes, seconds]);\n    \n\n    const tick = () => {\n   \n        if (hrs === 0 && mins === 0 && secs === 0) \n            reset()\n        else if (mins === 0 && secs === 0) {\n            setTime([hrs - 1, 59, 59]);\n        } else if (secs === 0) {\n            setTime([hrs, mins - 1, 59]);\n        } else {\n            setTime([hrs, mins, secs - 1]);\n        }\n    };\n\n\n    const reset = () => setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n\n    \n    React.useEffect(() => {\n        const timerId = setInterval(() => tick(), 1000);\n        return () => clearInterval(timerId);\n    });\n\n    \n    return (\n        <div>\n            <p>{`${hrs.toString().padStart(2, '0')}:${mins\n            .toString()\n            .padStart(2, '0')}:${secs.toString().padStart(2, '0')}`}</p> \n        </div>\n    );\n}\n\nexport default CountDownTimer;\n","import './App.css';\nimport CountDownTimer from './CountDownTimer';\n\nfunction App() {\n\n  const hoursMinSecs = {hours:1, minutes: 20, seconds: 40}\n  \n  return (\n    <div className=\"App\">\n        <CountDownTimer hoursMinSecs={hoursMinSecs}/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}